package com.connect2.ec.controller;

import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.io.FilenameUtils;
import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.connect2.dao.User;

import com.connect2.ec.adapter.ec.am.service.AmazonProductService;

import com.connect2.ec.domain.C2IEcDashboard;
import com.connect2.ec.domain.C2IEcProduct;
import com.connect2.ec.domain.C2IEcProductImage;
import com.connect2.ec.domain.C2IEcSeller;
import com.connect2.ec.domain.C2IEcSellerBrand;
import com.connect2.ec.domain.C2IEcShipment;
import com.connect2.ec.domain.C2IEcStore;
import com.connect2.ec.domain.C2IEcStoreDocs;
import com.connect2.ec.service.C2IEcommerceService;
import com.connect2.utility.C2IUtils;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.gson.Gson;

@RestController
@RequestMapping("/ecomm")
public class C2IEcommerceController{
	private final Logger logger = LoggerFactory.getLogger(C2IEcommerceController.class);

	
	
	
	
	@Autowired
	private C2IEcommerceService c2iEcService;

	@RequestMapping("/notifications/flipkart/receive")
	public void receiveFlipkartNotification(@RequestBody Map<?, ?> map, HttpServletRequest request) {
		try {
			boolean isAuthenticated = true;
			if (isAuthenticated) {
				logger.info(map.toString());
			} else {
				System.out.println("Authentication failed");
				logger.info("Authentication Failed");
			}
			System.out.println("Hello World");
		} catch (Exception e) {
			e.printStackTrace();
		}

	}
	//Changes has been made
	//This is the second change to test.
	
	
	
	@RequestMapping("/notifications/amazon/receive")
	public void receiveAmazonNotification(@RequestBody Map<?, ?> map, HttpServletRequest request) {
		try {
			boolean isAuthenticated = true;
			if (isAuthenticated) {
				logger.info(map.toString());
			} else {
				System.out.println("Authentication failed");
				logger.info("Authentication Failed");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	@RequestMapping("/notifications/amazon/report/receive")
	public void receiveAmazonReportNotification(@RequestBody String report, HttpServletRequest request) {
		try {
			boolean isAuthenticated = true;
			if (isAuthenticated) {
				logger.info(report);
				JSONObject json = new JSONObject(report);
				String reportId = json.getString("");
				C2IEcSeller c2iSeller = null;
				AmazonProductService.getReport(c2iSeller, reportId);
			} else {
				System.out.println("Authentication failed");
				logger.info("Authentication Failed");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	@RequestMapping("/insertSellerDetails")
	public int insertSellerDetails(@RequestBody C2IEcSeller ecSeller) {
		int ecSellerId = 0;

		ecSellerId = c2iEcService.insertSellerDetails(ecSeller);

		return ecSellerId;
	}

	@RequestMapping("/createStore")
	public Map<String, Object> createStore(@RequestBody C2IEcStore c2iEcStore) {
		Map<String, Object> resp = new HashMap<String, Object>();
		try {
			System.out.println("----CREATING STORE----");
			int ecStoreId;

			ecStoreId = c2iEcService.createStore(c2iEcStore);
			resp.put("ecStoreId", ecStoreId);

		} catch (Exception e) {
			logger.error("Error creating store");
			e.printStackTrace();
		}

		return resp;
	}

	@RequestMapping("/insertStoreDocs")
	public Map<String, Object> insertStoreDocs(@RequestParam("storeDoc") MultipartFile storeDoc,
			@RequestParam("ecStoreId") int ecStoreId, @RequestParam("documentType") String documentType) {
		Map<String, Object> resp = new HashMap<String, Object>();
		C2IEcStoreDocs c2iEcStoreDocs = null;
		try {
			System.out.println("----INSERTING STORE DOCS----");
			String status;

			if (storeDoc != null) {
				c2iEcStoreDocs = new C2IEcStoreDocs();
				c2iEcStoreDocs.setEcStoreId(ecStoreId);
				c2iEcStoreDocs.setDocumentName(storeDoc.getOriginalFilename());
				c2iEcStoreDocs.setDocumentType(documentType);
				c2iEcStoreDocs.setDocumentData(storeDoc.getBytes());

			}

			status = c2iEcService.insertStoreDocs(c2iEcStoreDocs);

			resp.put("success", status);

		} catch (Exception e) {
			logger.error("Error inserting store docs");
			e.printStackTrace();
		}

		return resp;
	}

	@RequestMapping("/getStoreDetails")
	public List<C2IEcStore> getStoreDetails() {
		
		C2IEcStore c2iEcStore = new C2IEcStore();
		List<C2IEcStore> C2iEcStore=null;
		try {
			User loggedInUser = C2IUtils.getLoggedInUser();
			System.out.println(loggedInUser);
			c2iEcStore.setCompanyId(loggedInUser.getCompanyId());
			C2iEcStore = c2iEcService.getStoreDetails(c2iEcStore);
		} catch (Exception e) {
			e.printStackTrace();
		}

		return C2iEcStore;
	}

	@RequestMapping("/getDashboardDetails")
	public C2IEcDashboard getDashboardDetails(@RequestBody C2IEcDashboard c2iEcDashboard) {

		try {
			c2iEcDashboard = c2iEcService.getDashBoardDetails(c2iEcDashboard);
		} catch (SQLException e) {
			e.printStackTrace();
		}

		return c2iEcDashboard;
	}

	@RequestMapping("/insertBrandDetails")
	public int insertBrandDetails(@RequestParam("brandLogo") MultipartFile brandLogo,
			@RequestParam("sampleMrpTagImage") MultipartFile sampleMrpTagImage,
			@RequestParam("documentData") MultipartFile documentData, @RequestParam("brand") String sellerBrand) {
		int sellerBrandId = 0;
		C2IEcSellerBrand brand = new C2IEcSellerBrand();
		try {
			System.out.println(sellerBrand);
			Map<String, String> brandDetails = new Gson().fromJson(sellerBrand, HashMap.class);
			ObjectMapper mapper = new ObjectMapper();
			brand = mapper.convertValue(brandDetails, C2IEcSellerBrand.class);

			if (brandLogo != null) {
				brand.setBrandLogo(brandLogo.getBytes());
			}
			if (sampleMrpTagImage != null) {
				brand.setSampleMrpTagImage(sampleMrpTagImage.getBytes());
			}
			if (documentData != null) {
				brand.setDocumentData(documentData.getBytes());
				brand.setDocumentName(documentData.getOriginalFilename());
			}

			sellerBrandId = c2iEcService.insertBrandDetails(brand);
		} catch (IOException e) {
			e.printStackTrace();

		}
		return sellerBrandId;
	}

	@RequestMapping("/brandApproval")
	public boolean approveBrand(@RequestBody Map<String, String> brand) {
		boolean approval = c2iEcService.approveBrand(brand);
		return approval;
	}

	@RequestMapping("/insertProduct")
	public Map<String, Object> insertProduct(@RequestBody C2IEcProduct product) {

		Map<String, Object> resp = new HashMap<String, Object>();

		User loggedInUser = C2IUtils.getLoggedInUser();

		try {
//			Map<String, Object> status = new HashMap<String,Object>();
			product.setCompanyId(loggedInUser.getCompanyId());
//			status = c2iEcService.insertProduct(product);
			resp = c2iEcService.insertProduct(product);
//			resp.put("success", status.get("storeStatus"));

		} catch (Exception e) {

			e.printStackTrace();
		}
		return resp;
	}

	@RequestMapping("/insertProductImages")
	public Map<String, Object> insertProductImages(@RequestParam("imageFile") MultipartFile imageFile,
			@RequestParam("ecProdId") int ecProdId) {

		Map<String, Object> resp = new HashMap<String, Object>();
		C2IEcProductImage c2iEcProductImage = new C2IEcProductImage();

		try {
			Map<String, Object> status = new HashMap<String, Object>();

			if (imageFile != null) {

				c2iEcProductImage.setEcProdId(ecProdId);
				c2iEcProductImage.setImageName(imageFile.getOriginalFilename());
				c2iEcProductImage.setImageType(FilenameUtils.getExtension(imageFile.getOriginalFilename()));
				//c2iEcProductImage.setView(view);
				c2iEcProductImage.setImageData(imageFile.getBytes());

			}

			status.put("imageStatus", c2iEcService.insertProductImages(c2iEcProductImage));

			resp.put("success", status.get("storeStatus"));

		} catch (Exception e) {

			e.printStackTrace();
		}
		return resp;
	}

	@RequestMapping("/getProductImages")
	public List<C2IEcProductImage> getProductImages(@RequestBody C2IEcProductImage image) {
		List<C2IEcProductImage> productImages = new ArrayList<C2IEcProductImage>();

		productImages = c2iEcService.getProductImages(image);

		return productImages;
	}

	@RequestMapping("/updateProductImage")
	public Map<String, Object> updateProductImage(@RequestParam("imageFile") MultipartFile imageFile,
			@RequestParam("ecProdId") int ecProdId, @RequestParam("view") String view) {
		Map<String, Object> resp = new HashMap<String, Object>();
		C2IEcProductImage c2iEcProductImage = new C2IEcProductImage();

		try {
			if (imageFile != null) {

				c2iEcProductImage.setEcProdId(ecProdId);
				c2iEcProductImage.setImageName(imageFile.getOriginalFilename());
				c2iEcProductImage.setImageType(FilenameUtils.getExtension(imageFile.getOriginalFilename()));
				c2iEcProductImage.setView(view);
				c2iEcProductImage.setImageData(imageFile.getBytes());

			}

			resp.put("success", c2iEcService.insertProductImages(c2iEcProductImage));

		} catch (Exception e) {

			e.printStackTrace();
		}
		return resp;
	}

	@RequestMapping("/insertFKProductIds")
	public int insertFKProductIds(@RequestBody C2IEcProduct criteria) {
		int status = c2iEcService.insertFKProductsIds(criteria);
		return status;
	}

	@RequestMapping("/updateProduct")
	public Map<String, Object> updateProduct(@RequestBody C2IEcProduct product) {

		Map<String, Object> resp = new HashMap<String, Object>();

		try {
			Map<String, Object> status;
			status = c2iEcService.updateProduct(product);
			resp.put("status", status.get("storeStatus"));
		} catch (Exception e) {
			e.printStackTrace();
		}

		return resp;
	}

	@RequestMapping("/updateProductPrice")
	public Map<String, Object> updateProductPrice(@RequestBody C2IEcProduct product) {

		Map<String, Object> resp = new HashMap<String, Object>();

		try {
			Map<String, Object> status;
			status = c2iEcService.updateProductPrice(product);
			resp.put("status", status.get("storeStatus"));
		} catch (Exception e) {
			e.printStackTrace();
		}

		return resp;
	}

	@RequestMapping("/updateProductInventory")
	public Map<String, Object> updateProductInventory(@RequestBody C2IEcProduct product) {

		Map<String, Object> resp = new HashMap<String, Object>();

		try {
			Map<String, Object> status;
			status = c2iEcService.updateProductInventory(product);
			resp.put("status", status.get("storeStatus"));
		} catch (Exception e) {
			e.printStackTrace();
		}

		return resp;
	}

	@RequestMapping("/getProducts/{refresh}")
	public List<C2IEcProduct> getProducts(@PathVariable("refresh") boolean refreshData,
			@RequestBody C2IEcProduct criteria) {

		List<C2IEcProduct> c2iEcProducts = new ArrayList<C2IEcProduct>();

		try {
			c2iEcProducts = c2iEcService.getProducts(criteria, refreshData);

		} catch (Exception e) {
			e.printStackTrace();
		}

		return c2iEcProducts;
	}

	@RequestMapping("/getProductDetails/{refresh}")
	public C2IEcProduct getProductDetails(@PathVariable("refresh") boolean refreshData,
			@RequestBody C2IEcProduct ecProdId) {
		C2IEcProduct c2iEcProduct = null;
		try {
			c2iEcProduct = c2iEcService.getProductDetails(ecProdId, refreshData);
		} catch (Exception e) {
			e.printStackTrace();
		}

		return c2iEcProduct;
	}

	@RequestMapping("/getProductForms")
	public Map<String, Object> getProductForms(@RequestBody HashMap<String, String> categories) {
		Map<String, Object> productForms = new HashMap<String, Object>();

		productForms = c2iEcService.getProductForms(categories);

		return productForms;

	}

	@RequestMapping("/getOrderDetails")
	public Map<String, Object> getOrderDetails(@RequestBody String orderId) {
		Map<String, Object> orderDetails = new HashMap<String, Object>();

		orderDetails = c2iEcService.getOrderDetails(orderId);

		return orderDetails;
	}

	@RequestMapping("/searchShipment")
	public List<C2IEcShipment> searchShipment(List<C2IEcShipment> shipments) {

		shipments = c2iEcService.searchShipment(shipments);

		return shipments;
	}

	@RequestMapping("/markReadyToDispatch")
	public List<C2IEcShipment> markReadyToDispatch(List<C2IEcShipment> shipments) {

		shipments = c2iEcService.markReadyToDispatch(shipments);

		return shipments;
	}

	@RequestMapping("/cancelOrder")
	public List<C2IEcShipment> cancelOrder(List<C2IEcShipment> shipments) {

		shipments = c2iEcService.cancelOrder(shipments);

		return shipments;
	}

	@RequestMapping("/markDelivered")
	public List<C2IEcShipment> markDelivered(List<C2IEcShipment> shipments) {

		shipments = c2iEcService.markDelivered(shipments);

		return shipments;
	}

	@RequestMapping("/markAttemptedDelievered")
	public List<C2IEcShipment> markAttemptedDelivery(List<C2IEcShipment> shipments) {

		shipments = c2iEcService.markAttemptedDelivery(shipments);

		return shipments;
	}

	@RequestMapping("/markServiceCompleted")
	public List<C2IEcShipment> markServiceComplete(List<C2IEcShipment> shipments) {

		shipments = c2iEcService.markDelivered(shipments);

		return shipments;
	}

	@RequestMapping("/markServiceAttempted")
	public List<C2IEcShipment> markServiceAttempted(List<C2IEcShipment> shipments) {

		shipments = c2iEcService.markDelivered(shipments);

		return shipments;
	}

	@RequestMapping("/approveReturns")
	public List<C2IEcShipment> approveReturns(List<C2IEcShipment> shipments) {

		shipments = c2iEcService.approveReturns(shipments);

		return shipments;
	}

	@RequestMapping("/rejectReturns")
	public List<C2IEcShipment> rejectReturns(List<C2IEcShipment> shipments) {

		shipments = c2iEcService.rejectReturns(shipments);

		return shipments;
	}

	@RequestMapping("/complete")
	public List<C2IEcShipment> completeReturns(List<C2IEcShipment> shipments) {

		shipments = c2iEcService.completeReturns(shipments);

		return shipments;
	}

	@RequestMapping("/pickupReturns")
	public List<C2IEcShipment> pickupReturns(List<C2IEcShipment> shipments) {

		shipments = c2iEcService.pickupReturns(shipments);

		return shipments;
	}

	@RequestMapping("/pickupReturnsAttempted")
	public List<C2IEcShipment> pickupReturnsAttempted(List<C2IEcShipment> shipments) {

		shipments = c2iEcService.completeReturns(shipments);

		return shipments;
	}
	
	//Boxnbiz API's
	@RequestMapping("/inqury/submit-inquiry")
	public Map<String,String> inquiry_submit_inquiry(@RequestBody InquiryDetails sid) throws Exception{
		Map<String,String> map=new HashMap<>();
		User user=new User();
		sid.setCompany_id("ICONN660");
		sid.setShipper_person_id("ICONN660");
		c2iEcService.inquiry_submit_inquiry(sid);
		map.put("success","Your details have been submitted successfully");
		return map;
		
	}
	
	
	@RequestMapping("/inquiry/update-inquiry")
	public Map<String,String> inquiry_update_inquiry(@RequestBody InquiryDetails sid) throws Exception{
		Map<String,String> map=new HashMap<>();
		sid.setCompany_id("ICONN660");
		sid.setShipper_person_id("ICONN660");
		
		c2iEcService.inquiry_update_inquiry(sid);
		return map;
	}
	
	
	
	

}