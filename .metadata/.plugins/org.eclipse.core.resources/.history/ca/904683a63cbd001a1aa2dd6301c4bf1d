package com.connect2.ec.service;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URLEncoder;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

import javax.annotation.PostConstruct;

import org.apache.commons.collections.CollectionUtils;
import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.methods.HttpPut;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.json.JSONArray;
import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;

import com.connect2.dao.User;
import com.connect2.ec.adapter.ec.am.service.AmazonEcomService;
import com.connect2.ec.adapter.ec.eb.service.EbayEcomService;
import com.connect2.ec.adapter.ec.fk.FlipkartEcommService;
import com.connect2.ec.constants.ECType;
import com.connect2.ec.controller.BookingDetails;
import com.connect2.ec.controller.InquiryDetails;
import com.connect2.ec.dao.C2IEcommerceDao;
import com.connect2.ec.domain.C2IEcDashboard;
import com.connect2.ec.domain.C2IEcOrder;
import com.connect2.ec.domain.C2IEcProduct;
import com.connect2.ec.domain.C2IEcProductImage;
import com.connect2.ec.domain.C2IEcSeller;
import com.connect2.ec.domain.C2IEcSellerBrand;
import com.connect2.ec.domain.C2IEcShipment;
import com.connect2.ec.domain.C2IEcStore;
import com.connect2.ec.domain.C2IEcStoreDocs;
import com.connect2.utility.C2IUtils;

@Service
public class C2IEcommerceService {
	private String companyId="ICONN660";
	private String shipperPersonId="ICONN660";
	private String token="eyJhbGciOiJIUzI1NiJ9.eyJqdGkiOiJ5b2dlc2guZ2FyZ0Bjb25uZWN0MmluZGlhLmNvbSIsIml"
			+ "zcyI6InlvZ2VzaEAxMjMiLCJsb2dpblVzZXJJbmZvRHRvIjp7ImlkIjozMDYsInJvbGUiOiJzaGlwcGVyIiwiZW"
			+ "1wbG95ZWVfaWQiOm51bGwsInN1Yl9yb2xlIjpudWxsLCJkZXBhcnRtZW50IjpudWxsLCJkZXNpZ25hdGlvbiI6b"
			+ "nVsbCwicGFyZW50X2lkIjpudWxsLCJwZXJzb25faWQiOiJJQ09OTjY2MCIsImNvbXBhbnlfaWQiOiJJQ09OTjY2"
			+ "MCIsImNvbXBhbnlfbmFtZSI6IklDT05ORUNUIEJVU0lORVNTIFBSSVZBVEUgTElNSVRFRCIsInBlcnNvbl9uYW1"
			+ "lIjoiWW9nZXNoIEdhcmciLCJlbWFpbF9pZCI6InlvZ2VzaC5nYXJnQGNvbm5lY3QyaW5kaWEuY29tIiwicHJvZm"
			+ "lsZV91cGRhdGVfc3RhdHVzIjoiMCIsInZlcmlmaWNhdGlvbl9jb2RlIjoiMjI4NzMxIiwidmVyaWZpY2F0aW9uX"
			+ "3N0YXR1cyI6Ik4iLCJtb2JpbGVfbm8iOiI4ODYwMTQ5ODM2IiwiYWN0aXZlIjoiWSIsInRva2VuIjpudWxsLCJt"
			+ "c2ciOm51bGx9LCJpYXQiOjE1OTE5NDIxMDB9.YxU3M21SHLivKqJ-JD8ktfr6pReFhNVE-LLCmbH3aJs";
	
	private final Logger logger = LoggerFactory.getLogger(C2IEcommerceService.class);

	@Autowired
	private C2IEcommerceDao c2iEcDao;
	
	@Autowired 
	private FlipkartEcommService fkService;
	
	@Autowired
	private AmazonEcomService amService;
	
	@Autowired
	private EbayEcomService ebayService;

	@Autowired
	private List<IEComService> ecommAdapters;

	private final Map<ECType, IEComService> ecomAdaptersCache = new HashMap<>();

	@PostConstruct
	public void registerECAdapters() {
		if (ecommAdapters != null) {
			try {
				for (IEComService stc : ecommAdapters) {
					ecomAdaptersCache.put(stc.getECType(), stc);
					logger.info("Registered {} adapter for ec {}", stc.getClass().getName(), stc.getECType());
				}
			} catch (Exception ex) {
				ex.printStackTrace();
				logger.error("Error in registering ec adapters");
			}
		}
	}
	
	public IEComService getEcomAdapter(ECType type) {
		return ecomAdaptersCache.get(type);
	}
	
	public int insertSellerDetails(C2IEcSeller ecSeller) {
		int ecSellerId=0;
		try {
			ecSellerId = c2iEcDao.insertSellerDetails(ecSeller);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return ecSellerId;
	}
	
	public Map<Long, List<C2IEcProduct>> getAllProductSkus(long companyId, long storeId, ECType type) throws Exception {
		return c2iEcDao.getProductSKUs(storeId, type, companyId);
	}
	
	@Async("pdAsyncExecutor")
	public CompletableFuture<List<C2IEcProduct>> getProductsFromOnlineStore(ECType ecType, List<String> skus) {
		List<C2IEcProduct> products = new ArrayList<C2IEcProduct>();
		products = getEcomAdapter(ecType).getProducts(skus);
		return CompletableFuture.completedFuture(products);
	} 
	
	public List<C2IEcStore> getBasicStores(long companyId) throws Exception {
		return c2iEcDao.getBasicStores(companyId);
	}
	
	public List<C2IEcStore> getDetailedStores(long companyId) throws Exception {
		return c2iEcDao.getDetailedStores(companyId);
	}
	
	public List<C2IEcProduct> getProductsFromAllOnlineStores(long companyId) throws Exception {
		List<C2IEcProduct> products = new ArrayList<C2IEcProduct>();
		Map<Long, List<C2IEcProduct>> skuProds = getAllProductSkus(companyId, -1, null);
		List<CompletableFuture<List<C2IEcProduct>>> completableJobs = new ArrayList<>();
		
//		List<C2IEcStore> stores = getBasicStores(companyId);
		
		for(long sid: skuProds.keySet()) {
			List<C2IEcProduct> cps = skuProds.get(sid);
			List<String> skus = new ArrayList<>();
			ECType type = null;
			if(!CollectionUtils.isEmpty(skus)) {
				for(C2IEcProduct c2iec: cps) {
					skus.add(c2iec.getSku());
//					type = c2iec.getEcStoreType();
				}
			}
			
			CompletableFuture<List<C2IEcProduct>> prods = getProductsFromOnlineStore(type, skus);
			completableJobs.add(prods);
		}
		
		CompletableFuture.allOf(completableJobs.toArray(new CompletableFuture[completableJobs.size()])).join();
		for(CompletableFuture<List<C2IEcProduct>> cf: completableJobs) {
			if(!CollectionUtils.isEmpty(cf.get())) {
				products.addAll(cf.get());
			}
		}
		
		return products;
	} 

	public List<C2IEcStore> getStoreDetails(C2IEcStore c2iEcStore) throws Exception {
		
		List<C2IEcStore> C2iEcStore = c2iEcDao.getDetailedStores(c2iEcStore.getCompanyId());
		return C2iEcStore;
	}

	public C2IEcSeller getSellerInfo() {
		return null;
	}

	public int createStore(C2IEcStore store) throws SQLException {
		int ecStoreId = c2iEcDao.createStore(store);
		return ecStoreId;
	}

	public String insertStoreDocs(C2IEcStoreDocs c2iEcStoreDocs) {
		String status="";
		try {
			status = c2iEcDao.insertStoreDocs(c2iEcStoreDocs);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return status;
	}
	
	public int insertFKProductsIds(C2IEcProduct criteria) {
		List<C2IEcProduct> c2iEcProducts = new ArrayList<C2IEcProduct>();		
		List<String> skus = new ArrayList<String>();
		int status=0;
		
		try {
			c2iEcProducts = c2iEcDao.getProducts(criteria);
			
			for(C2IEcProduct product : c2iEcProducts) {
				skus.add(product.getSku());
			}
			
			c2iEcProducts = fkService.getProducts(skus);
			
			status= c2iEcDao.insertFKProductIds(c2iEcProducts);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return status;
	}
	
	public C2IEcDashboard getDashBoardDetails(C2IEcDashboard c2iEcDashboard) throws SQLException {
		c2iEcDashboard = c2iEcDao.getDashboardDetails(c2iEcDashboard);
		return c2iEcDashboard;
	}

	public List<C2IEcProduct> getProducts(C2IEcProduct criteria) throws Exception {
		return getProducts(criteria, false);
	}

	public List<C2IEcProduct> getProducts(C2IEcProduct criteria, boolean refreshFromServer) throws Exception {
		List<C2IEcProduct> c2iEcProducts = new ArrayList<C2IEcProduct>();		
		if (!refreshFromServer) {
			c2iEcProducts = c2iEcDao.getProducts(criteria);
		} else {
			
//			fpService.getProducts();
		}

		return c2iEcProducts;
	}
	
	public C2IEcProduct getProductDetails(C2IEcProduct c2iEcProduct, boolean refreshFromServer) throws SQLException {
		if (!refreshFromServer) {
			c2iEcProduct = c2iEcDao.getProductDetails(c2iEcProduct);
		} else {
			// TODO fetch and update db from indv. ecom stores.
//			fpService.getProducts();
		}
		return c2iEcProduct;
	}

	public int insertBrandDetails(C2IEcSellerBrand brand){
		int sellerBrandId=0;
		try {
			sellerBrandId=c2iEcDao.insertBrandDetails(brand);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		System.out.println("sellerBrandId");
		return sellerBrandId;
	}
	
	public boolean approveBrand(Map<String,String> brand) {
		boolean approval=false;
		try {
			approval = c2iEcDao.approveBrand(brand);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return approval;
	}
	
	public Map<String, Object> insertProduct(C2IEcProduct product) throws Exception {

		Map<String, Object> resp = new HashMap<String, Object>();
		
		if(product.getEcStoreTypes().contains(ECType.FLIPKART)) {
			resp.put("fkstoreStatus", fkService.insertProduct(product));
		}
		if(product.getEcStoreTypes().contains(ECType.AMAZON)) {
			resp.put("amStoreStatus", amService.insertProduct(product));
		}
		if(product.getEcStoreTypes().contains(ECType.EBAY)) {
			resp.put("ebayStoreStatus", ebayService.insertProduct(product) );
		}
		resp.put("ecProdId", c2iEcDao.insertProduct(product));
		return resp;
	}

	public String insertProductImages(C2IEcProductImage c2iEcProductImage){
		String status="";
		try {
			status = c2iEcDao.insertProductImages(c2iEcProductImage);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return status;
	}
	
	public int updateProductImage(C2IEcProductImage image) {
		int status=0;
		try {
			status = c2iEcDao.updateProductImages(image);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return status;
	}
	
	public List<C2IEcProductImage> getProductImages(C2IEcProductImage image) {
		List<C2IEcProductImage> productImages= new ArrayList<C2IEcProductImage>();
		try {
			productImages=c2iEcDao.getProductImages(image);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return productImages;
	}
	
	
	public Map<String, Object> updateProduct(C2IEcProduct product) throws Exception {

		Map<String, Object> resp = new HashMap<String, Object>();
		resp.put("daoStatus", c2iEcDao.updateProduct(product));
		if(product.getEcStoreTypes().contains(ECType.FLIPKART)) {
			resp.put("fkstoreStatus", fkService.updateProduct(product));
		}
		if(product.getEcStoreTypes().contains(ECType.AMAZON)) {
			resp.put("amStoreStatus", amService.updateProduct(product));
		}
		if(product.getEcStoreTypes().contains(ECType.EBAY)) {
			resp.put("ebayStoreStatus", ebayService.updateProduct(product) );
		}
		return resp;
	}
	
	public Map<String, Object> updateProductPrice(C2IEcProduct product) throws Exception {
		Map<String, Object> resp = new HashMap<String, Object>();
		resp.put("daoStatus", c2iEcDao.updateProductPrice(product));
		if(product.getEcStoreTypes().contains(ECType.FLIPKART)) {
			resp.put("fkstoreStatus", fkService.updateProductPrice(product));
		}
		if(product.getEcStoreTypes().contains(ECType.AMAZON)) {
			resp.put("amStoreStatus", amService.updateProductPrice(product));
		}
		if(product.getEcStoreTypes().contains(ECType.EBAY)) {
			resp.put("ebayStoreStatus", ebayService.updateProduct(product) );
		}
		return resp;
	}

	public Map<String, Object> updateProductInventory(C2IEcProduct product) throws Exception {
		Map<String, Object> resp = new HashMap<String, Object>();
		resp.put("daoStatus", c2iEcDao.updateProductInventory(product));
		if(product.getEcStoreTypes().contains(ECType.FLIPKART)) {
			resp.put("fkstoreStatus", fkService.updateProductInventory(product));
		}
		if(product.getEcStoreTypes().contains(ECType.AMAZON)) {
			resp.put("amStoreStatus", amService.updateProductInventory(product));
		}
		if(product.getEcStoreTypes().contains(ECType.EBAY)) {
			resp.put("ebayStoreStatus", ebayService.updateProduct(product) );
		}
		return resp;
	}

	public Map<String, Object> getProductForms(Map<String,String> categories){
		Map<String, Object> productForms = new HashMap<String, Object>();
		try {
			productForms=c2iEcDao.getProductForms(categories);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return productForms;
		
	}
	
	public List<C2IEcOrder> getAllOrders() {
		return null;
	}

	public List<C2IEcOrder> getOrders(Date startDate, Date endDate) {
		return null;
	}

	public Map<String,Object> getOrderDetails(String orderId) {
		Map<String, Object> orderDetails = new HashMap<String, Object>();
		try {
			orderDetails = c2iEcDao.getOrderDetails(orderId);
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return orderDetails;
	}

	public List<C2IEcShipment> searchShipment(List<C2IEcShipment> shipments) {
		shipments = fkService.searchShipment(shipments);
		return shipments;
	}

	public List<C2IEcShipment> generateLabel(List<C2IEcShipment> shipments) {
		shipments = fkService.generateLabel(shipments);
		return shipments;
	}

	public List<C2IEcShipment> markReadyToDispatch(List<C2IEcShipment> shipments) {
		shipments = fkService.markReadyToDispatch(shipments);
		
		return shipments;
	}

	public List<C2IEcShipment> cancelOrder(List<C2IEcShipment> shipments) {
		shipments = fkService.cancelOrder(shipments);
		
		return shipments;
	}

	public List<C2IEcShipment> markDelivered(List<C2IEcShipment> shipments) {
		shipments = fkService.markDelivered(shipments);
		
		return shipments;
	}

	public List<C2IEcShipment> markAttemptedDelivery(List<C2IEcShipment> shipments) {
		shipments = fkService.markAttemptedDelivery(shipments);
		
		return shipments;
	}

	public List<C2IEcShipment> markServiceCompleted(List<C2IEcShipment> shipments) {
		shipments = fkService.markServiceCompleted(shipments);
		
		return shipments;
	}

	public List<C2IEcShipment> markServiceAttempted(List<C2IEcShipment> shipments) {
		shipments = fkService.markServiceAttempted(shipments);
		
		return shipments;
	}

	public List<C2IEcShipment> approveReturns(List<C2IEcShipment> shipments) {
		shipments = fkService.approveReturns(shipments);
		
		return shipments;
	}

	public List<C2IEcShipment> rejectReturns(List<C2IEcShipment> shipments) {
		shipments = fkService.rejectReturns(shipments);
		
		return shipments;
	}

	public List<C2IEcShipment> completeReturns(List<C2IEcShipment> shipments) {
		shipments = fkService.completeReturns(shipments);
	
		return shipments;
	}

	public List<C2IEcShipment> pickupReturns(List<C2IEcShipment> shipments) {
		shipments = fkService.pickupReturns(shipments);
		
		return shipments;
	}

	public List<C2IEcShipment> pickupReturnsAttempted(List<C2IEcShipment> shipments) {
		shipments = fkService.pickupReturnsAttempted(shipments);
		
		return shipments;
	}
	
	//Boxnbiz API's Service
	
	public String submitInquiry(InquiryDetails  inquiryDetails) throws Exception {
		String status="";
		Map<String,String> ans=new HashMap<>();
		JSONObject json=new JSONObject();
		json.put("company_id", companyId);
		json.put("shipper_person_id",shipperPersonId);
		json.put("trade_type",inquiryDetails.getTradeType());
		json.put("mode", inquiryDetails.getMode());
		json.put("incoterms", inquiryDetails.getIncoterms());
		json.put("pickup", inquiryDetails.getPickup());
		json.put("pol", inquiryDetails.getPol());
		json.put("pod", inquiryDetails.getPod());
		json.put("delivery", inquiryDetails.getDelivery());
		json.put("pickup_service", inquiryDetails.getPickupService());
		json.put("origin_handling", inquiryDetails.getOriginHandling());
		json.put("origin_cha", inquiryDetails.getOriginCha());
		json.put("delivery_service", inquiryDetails.getDeliveryService());
		json.put("destination_handling", inquiryDetails.getDestinationHandling());
		json.put("destination_cha", inquiryDetails.getDestinationCha());
		json.put("gross_weight", inquiryDetails.getGrossWeight());
		json.put("gross_weight_unit", inquiryDetails.getGrossWeightUnit());
		json.put("commodity", inquiryDetails.getCommodity());
		json.put("cargo_type", inquiryDetails.getCargoType());
		json.put("expected_pickup_Date", inquiryDetails.getExpectedPickupDate());
		json.put("lcl_package_quantity", inquiryDetails.getLclPackageQuantity());
		json.put("lcl_package_type", inquiryDetails.getLclPackageType());
		json.put("fcl_container_quantity", inquiryDetails.getFclContainerQuantity());
		json.put("fcl_container_type", inquiryDetails.getFclContainerType());
		json.put("fcl_container_size", inquiryDetails.getFclContainerSize());
		json.put("fcl_container_stuffing", inquiryDetails.getFclContainerStuffing());
		
		JSONArray dtos = new JSONArray();
		
		JSONObject dto = new JSONObject();
		dto.put("length", inquiryDetails.getLength());
		dto.put("width", inquiryDetails.getWidth());
		dto.put("height", inquiryDetails.getHeight());
		dto.put("quantity", inquiryDetails.getQuantity());
		dto.put("unit", inquiryDetails.getUnit());
		dto.put("air_load_type", inquiryDetails.getAirLoadType());
		dtos.put(dto);
		json.put("dimensionDtos", dtos);
		json.put("special_instruction", inquiryDetails.getSpecialInstruction());
		//System.out.println(json);
		StringEntity entity=new StringEntity(json.toString(),  "UTF-8");
		String url="https://demo.api.boxnbiz.com/v1/inquiry/submit-inquiry";
		HttpPost httppost=new HttpPost(url);
		httppost.addHeader("Authorization", "Bearer "+token);
		//httppost.addHeader("message",null);
		httppost.addHeader("Content-Type", "application/json");
		httppost.setEntity(entity);
		DefaultHttpClient httpclient=new DefaultHttpClient();
		HttpResponse response=httpclient.execute(httppost);
		BufferedReader in = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
		String line="";
		StringBuffer result=new StringBuffer();
        while ((line=in.readLine())!=null){
        	result.append(line.toString());
        }
        String res=result.toString();
        JSONObject jsonObject=new JSONObject(res);
        System.out.println(result);
        System.out.println(jsonObject);
        System.out.println(jsonObject.has("inquiry_id"));
        if(jsonObject.has("inquiry_id")){
        	status="Inquiry Submitted Successfully";
        	inquiryDetails.setInquiryId(jsonObject.getString("inquiry_id"));
        	if(inquiryDetails.getInquiryId().substring(0,3).equals("INS")) {
               	String inquiryId=inquiryDetails.getInquiryId();
               	String instantId=findInstantRate(inquiryId);
               	System.out.println(instantId);
                inquiryDetails.setInstantId(instantId);
            }
        	c2iEcDao.insertInquiryDetails(inquiryDetails);
        }	
        else if(jsonObject.has("message")){
        	status=jsonObject.getString("message");
        }
        else {
        	status="Inquiry Submission Failed";
        }
        return status;
	}
	public String findInstantRate(String inquiryId) throws Exception{
		String instantId=null;
		String url="https://demo.api.boxnbiz.com/v1/inquiry/find-instant-rate/"+inquiryId+"?company_id="+companyId;
        HttpGet httpget=new HttpGet(url);
        httpget.addHeader("Authorization", "Bearer "+token);
        //httppost.addHeader("message",null);
        //httpget.addHeader("Content-Type", "application/json");
        DefaultHttpClient httpclient=new DefaultHttpClient();
        HttpResponse response=httpclient.execute(httpget);
        BufferedReader in= new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
        String line="";
        StringBuffer result=new StringBuffer();
        while ((line=in.readLine())!=null){
           result.append(line.toString());
           //System.out.println(line);
                	
        }
        result.toString();
        System.out.println(result);
        JSONArray jsonArray=new JSONArray(result);
        if(jsonArray.getJSONObject(0).has("instant_id")) {
            instantId=Integer.toString(jsonArray.getJSONObject(0).getInt("instant_id"));
        }
		return instantId;
	}
	public List<InquiryDetails> getInquiry() throws SQLException{
		return c2iEcDao.getInquiry();
	}
	public InquiryDetails getInquiryDetails(int inquiryDetialsId) throws SQLException{
		return c2iEcDao.getInquiryDetails(inquiryDetialsId);
	}
	public String updateInquiryDetails(InquiryDetails inquiryDetails) throws Exception{
		String status="";
		Map<String,String> ans=new HashMap<>();
		JSONObject json=new JSONObject();
		json.put("company_id", companyId);
		json.put("shipper_person_id", shipperPersonId);
		json.put("trade_type",inquiryDetails.getTradeType());
		json.put("mode", inquiryDetails.getMode());
		json.put("incoterms", inquiryDetails.getIncoterms());
		json.put("pickup", inquiryDetails.getPickup());
		json.put("pol", inquiryDetails.getPol());//India
		json.put("pod", inquiryDetails.getPod());//US
		json.put("delivery", inquiryDetails.getDelivery());
		json.put("pickup_service", inquiryDetails.getPickupService());
		json.put("origin_handling", inquiryDetails.getOriginHandling());
		json.put("origin_cha", inquiryDetails.getOriginCha());
		json.put("delivery_service", inquiryDetails.getDeliveryService());
		json.put("destination_handling", inquiryDetails.getDestinationHandling());
		json.put("destination_cha", inquiryDetails.getDestinationCha());
		json.put("gross_weight", inquiryDetails.getGrossWeight());
		json.put("gross_weight_unit", inquiryDetails.getGrossWeightUnit());
		json.put("commodity", inquiryDetails.getCommodity());
		json.put("cargo_type", inquiryDetails.getCargoType());
		json.put("expected_pickup_Date", inquiryDetails.getExpectedPickupDate());
		json.put("lcl_package_quantity", inquiryDetails.getLclPackageQuantity());
		json.put("lcl_package_type", inquiryDetails.getLclPackageType());
		json.put("fcl_container_quantity", inquiryDetails.getFclContainerQuantity());
		json.put("fcl_container_type", inquiryDetails.getFclContainerType());
		json.put("fcl_container_size", inquiryDetails.getFclContainerSize());
		json.put("fcl_container_stuffing", inquiryDetails.getFclContainerStuffing());
		
		JSONArray dtos = new JSONArray();
		
		JSONObject dto = new JSONObject();
		dto.put("length", inquiryDetails.getLength());
		dto.put("width", inquiryDetails.getWidth());
		dto.put("height", inquiryDetails.getHeight());
		dto.put("quantity", inquiryDetails.getQuantity());
		dto.put("unit", inquiryDetails.getUnit());
		dto.put("air_load_type", inquiryDetails.getAirLoadType());
		dtos.put(dto);
		json.put("dimensionDtos", dtos);
		json.put("special_instruction", inquiryDetails.getSpecialInstruction());
		
		
		
		StringEntity entity=new StringEntity(json.toString(),  "UTF-8");
		String url="https://demo.api.boxnbiz.com/v1/inquiry/update-inquiry/"+inquiryDetails.getInquiryId();
		HttpPut httpput=new HttpPut(url);
		httpput.addHeader("Authorization", "Bearer "+token);
		//httppost.addHeader("message",null);
		httpput.addHeader("Content-Type", "application/json");
		httpput.setEntity(entity);
		DefaultHttpClient httpclient=new DefaultHttpClient();
		HttpResponse response=httpclient.execute(httpput);
		BufferedReader in = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
        String line="";
        StringBuffer result=new StringBuffer();
        while ((line=in.readLine())!=null){
        	result.append(line.toString());
        	//System.out.println(line);
        }
        result.toString();
        System.out.println(result);
        json=new JSONObject(result);
        if(json.has("success")) {
        	status="Inquiry Updated Successfully";
        	c2iEcDao.updateInquiryDetails(inquiryDetails);
        }
        else if(json.has("message")) {
        	status=json.getString("message");
        }
        else {
        	status="Inquiry Update Failed";
        }
        return status;
	}
	public String bookQuotation(String inquiryId,int instantId) throws Exception {
		String status="";
		BookingDetails bookingDetails=new BookingDetails();
		String quotationId=null;
		String url="https://demo.api.boxnbiz.com/v1/booking/book-quotation?inquiryId="+inquiryId
				    +"&company_id="+companyId+"&quotationId="+quotationId+"&instant_id="+instantId;
		HttpPost httppost=new HttpPost(url);
		httppost.addHeader("Authorization", "Bearer "+token);
		//httppost.addHeader("message",null);
		httppost.addHeader("Content-Type", "application/json");
		DefaultHttpClient httpclient=new DefaultHttpClient();
		HttpResponse response=httpclient.execute(httppost);
		BufferedReader in = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
        String line="";
        StringBuffer result=new StringBuffer();
        while ((line=in.readLine())!=null){
        	result.append(line.toString());
        }
        result.toString();
        System.out.println(result);
        JSONObject json=new JSONObject(result);
    	if(json.has("Booking Id")) {
    		System.out.println("Contains Booking iD");
    		status="Inquiry Booked Successfully";
    		bookingDetails.setBookingId(json.getString("Booking Id"));
    		bookingDetails.setBookingType(json.getString("Booking Type"));
    		bookingDetails.setQuotationId(json.getString("Quotation Id"));
    		bookingDetails.setUserId(C2IUtils.getLoggedInUser().getUserId());
    		bookingDetails.setInquiryId(json.getString("Inquiry Id"));
    		c2iEcDao.saveBooking(bookingDetails);
    		
    	}
    	else if(json.has("message")) {
    		status=json.getString("message");
    	}
    	else {
    		status="Quotation Booking Failed";
    	}
        return status;
	}
	public String closeInquiry(Map<String,String> map) throws Exception{
		String inquiryId=map.get("inquiryId");
		String reason="";
		try
	    {
	      reason= URLEncoder.encode(map.get("message"), "UTF-8");
	    }
	    catch (Exception uee)
	    {
	      throw new IllegalArgumentException(uee);
	    }
		int inquiryDetailsId=Integer.parseInt(map.get("inquiryDetailsId"));
		String status="";
		String url="https://demo.api.boxnbiz.com/v1/inquiry/close/"+inquiryId+"?company_id="+companyId+"&feedback="+reason;
		//System.out.println(url);
		HttpGet httpget=new HttpGet(url);
		httpget.addHeader("Authorization", "Bearer "+ token);
		//httppost.addHeader("message",null);
		httpget.addHeader("Content-Type", "application/json");
		DefaultHttpClient httpclient=new DefaultHttpClient();
		HttpResponse response=httpclient.execute(httpget);
		BufferedReader in = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
        String line="";
        StringBuffer result=new StringBuffer();
        while ((line=in.readLine())!=null){
        	result.append(line.toString());
        }
        result.toString();
        System.out.println(result);
        JSONObject json=new JSONObject(result);
    	if(json.has("success")) {
    		//check_status(inquiry_id,inquiry_details_id);
    		c2iEcDao.updateInquiryStatus(json.getString("success"), inquiryDetailsId);
    		status=json.getString("success");
    	}
    	else if(json.has("message")) {
    		status=json.getString("message");
    	}
    	else {
    		status="failure";
    	}
        return status;
	}
	
	public String checkStatus(String inquiryId,int inquiryDetailsId) throws Exception {
		String status="failure";
		String url="https://demo.api.boxnbiz.com/v1/inquiry/check-inquiry-status/"+inquiryId+"?company_id="+companyId;
		HttpGet httpget=new HttpGet(url);
		httpget.addHeader("Authorization", "Bearer "+ token);
		//httppost.addHeader("message",null);
		httpget.addHeader("Content-Type", "application/json");
		DefaultHttpClient httpclient=new DefaultHttpClient();
		HttpResponse response=httpclient.execute(httpget);
		BufferedReader in = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
        String line="";
        StringBuffer result=new StringBuffer();
        while ((line=in.readLine())!=null){
        	result.append(line.toString());
        	
        }
        result.toString();
        System.out.println(result);
        JSONObject json=new JSONObject(result);
    	if(json.has("success")) {
    		status=json.getString("success");
    		c2iEcDao.updateInquiryStatus(status, inquiryDetailsId);
    	}
        return status;
	}
	public Map<String,String> getRate(String inquiryId,int instantId) throws Exception{
		Map<String,String> map=new HashMap<>();
		String url="https://demo.api.boxnbiz.com/v1/inquiry/get-selected-instant-rate/"+inquiryId+"?company_id="+companyId+"&instant_id="+instantId;
		HttpGet httpget=new HttpGet(url);
		httpget.addHeader("Authorization", "Bearer " +token);
		//httppost.addHeader("message",null);
		//httpget.addHeader("Content-Type", "application/json");
		DefaultHttpClient httpclient=new DefaultHttpClient();
		HttpResponse response=httpclient.execute(httpget);
		BufferedReader in = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
        String line="";
        StringBuffer result=new StringBuffer();
        while ((line=in.readLine())!=null){
        	result.append(line.toString());
        }
        result.toString();
        System.out.println(result);
        JSONObject json=new JSONObject(result);
        if(json.has("quotation")) {
	    	System.out.println(json.getJSONObject("quotation"));
	    	Double totalPrice=json.getJSONObject("quotation").getDouble("total_price");
	    	map.put("Total Cost", Double.toString(totalPrice));
	    	if(json.has("quotationCharges")) {
		    	JSONArray jsonArray=json.getJSONArray("quotationCharges");
		    	for(int i=0;i<jsonArray.length();i++) {
		    		map.put((String)jsonArray.getJSONObject(i).get("charge_name"), Double.toString(jsonArray.getJSONObject(i).getDouble("total_INR")));
		    		//System.out.println(jsonArray.getJSONObject(i).get("charge_name")+" "+jsonArray.getJSONObject(i).getDouble("total_INR"));
		    	}
	    	}
        }
        else {
        	map.put("Instant Rate", "Not found");
        }
        return map;
	}
}
